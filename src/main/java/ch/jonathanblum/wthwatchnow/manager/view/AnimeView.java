/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ch.jonathanblum.wthwatchnow.manager.view;

import ch.jonathanblum.wthwatchnow.manager.model.Anime;
import java.awt.Image;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 *
 * @author Jonathan Blum <jonathan.blum@eldhar.com>
 */
public class AnimeView extends javax.swing.JInternalFrame {
    private final static Logger LOGGER = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
    private Anime currentAnime;

    /**
     * Creates new form AnimeView
     * @param anime
     */
    public AnimeView(Anime anime) {
        super("Anime", false, false, false, false);
        pack();
        setBorder(null);
        initComponents();
        changeAnime(anime);
    }
    
    public final void changeAnime(Anime next) {
        currentAnime = next;
        setTitle(currentAnime.getTitle());
        initData();
    }
    
    protected void initData() {
        if(currentAnime == null) 
            return;
        setTitle(currentAnime.getTitle());
        //setPicture();
        setStatus();
        setSynopsis();
        setGenres();
        setProducers();
        setProgress();
        setDates();
        
    }
    
    protected void setStatus() {
        String str = "Status: ";
        /*
        switch(currentAnime.getStatus()) {
            case 0: str += "Terminé"; break;
            case 1: str += "En cours"; break;
            case 2: str += "Planifié"; break;
            case 3: str += "TBA"; break;
            default: str+= "inconnu";
        }*/
        lbStatus.setText(str + currentAnime.getStatus());
    }
    
    protected void setSynopsis() {
        tpSynopsis.setContentType("text/html");
        tpSynopsis.setText(currentAnime.getSynopsis());
        tpSynopsis.setCaretPosition(0);
    }
    protected void setGenres() {
        lbGenres.setText("Genres : " + String.join(", ", currentAnime.getGenres()));
    }
    protected void setProducers() {
        lbProducers.setText("Producteurs : " + String.join(", ", currentAnime.getProducers()));
    }
    
    protected void setPicture() {
        if(currentAnime.getPics() != null && !currentAnime.getPics().isEmpty()) {
            java.net.URL imgURL;
            try {
                imgURL = new URL(currentAnime.getPics());
                Image img = ImageIO.read(imgURL);
                ImageIcon icon = new ImageIcon(img);
                
                lbPreview.setIcon(icon);
                
            } catch (MalformedURLException ex) {
                LOGGER.log(Level.WARNING, "Image cannot be loaded: {0}", ex);
            } catch (IOException ex) {
                LOGGER.log(Level.WARNING, "Image cannot be loaded: {0}", ex);
            }
        }
    }

    protected void setProgress() {
        pbar1.setMaximum(currentAnime.getMaxEp());
        pbar2.setMaximum(currentAnime.getMaxEp());
        pbar3.setMaximum(currentAnime.getMaxEp());
        pbar1.setValue(currentAnime.getAiredEp());
        if(currentAnime.getDlEp() > 0) {
            pbar2.setValue(currentAnime.getDlEp());
            pbar3.setValue(currentAnime.getViewedEp());
            pbar3.setVisible(true);
        } else {
            pbar2.setValue(currentAnime.getViewedEp());
            pbar3.setVisible(false); 
        }
    }
    
    protected void setDates() {
        String date;
        SimpleDateFormat sdf = new SimpleDateFormat("d MMM yyyy");
        if(currentAnime.getAiringDate() != null)
            lbAiringDate.setText("Début : " + sdf.format(currentAnime.getAiringDate()));
        else 
            lbAiringDate.setText("Début: inconnu");
        if(currentAnime.getEndDate() != null)
           lbEndDate.setText("Fin : " + sdf.format(currentAnime.getEndDate()));
        else
           lbEndDate.setText("Fin: inconnu");
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabpAnime = new javax.swing.JTabbedPane();
        pAnimeInfo = new javax.swing.JPanel();
        lbPreview = new javax.swing.JLabel();
        lbStatus = new javax.swing.JLabel();
        lbProducers = new javax.swing.JLabel();
        lbGenres = new javax.swing.JLabel();
        pbar1 = new javax.swing.JProgressBar();
        pbar2 = new javax.swing.JProgressBar();
        pbar3 = new javax.swing.JProgressBar();
        lbProgress = new javax.swing.JLabel();
        lbAiringDate = new javax.swing.JLabel();
        lbEndDate = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tpSynopsis = new javax.swing.JTextPane();
        pAnimeEpisodes = new javax.swing.JPanel();

        lbPreview.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/empty.png"))); // NOI18N
        lbPreview.setText("jLabel1");

        lbStatus.setText("Status : To Be Announced");

        lbProducers.setText("Producteurs : ");

        lbGenres.setText("Genres :");

        pbar1.setMaximum(24);
        pbar1.setToolTipText("Épisodes parus");
        pbar1.setValue(20);
        pbar1.setMinimumSize(new java.awt.Dimension(10, 20));
        pbar1.setPreferredSize(new java.awt.Dimension(150, 20));
        pbar1.setRequestFocusEnabled(false);

        pbar2.setForeground(new java.awt.Color(255, 153, 0));
        pbar2.setMaximum(24);
        pbar2.setToolTipText("Épisodes téléchargés");
        pbar2.setValue(13);

        pbar3.setForeground(new java.awt.Color(51, 204, 0));
        pbar3.setMaximum(24);
        pbar3.setToolTipText("Épisodes vus");
        pbar3.setValue(12);
        pbar3.setMinimumSize(new java.awt.Dimension(10, 20));
        pbar3.setPreferredSize(new java.awt.Dimension(150, 20));

        lbProgress.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        lbProgress.setText("Progression");

        lbAiringDate.setText("Début:");

        lbEndDate.setText("Fin:");

        tpSynopsis.setEditable(false);
        jScrollPane2.setViewportView(tpSynopsis);

        javax.swing.GroupLayout pAnimeInfoLayout = new javax.swing.GroupLayout(pAnimeInfo);
        pAnimeInfo.setLayout(pAnimeInfoLayout);
        pAnimeInfoLayout.setHorizontalGroup(
            pAnimeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAnimeInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pAnimeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pAnimeInfoLayout.createSequentialGroup()
                        .addGroup(pAnimeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbProducers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                            .addComponent(lbAiringDate, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pAnimeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pAnimeInfoLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(pAnimeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pAnimeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(pbar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(pbar2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(pbar3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pAnimeInfoLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(lbProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pAnimeInfoLayout.createSequentialGroup()
                        .addGroup(pAnimeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbGenres, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pAnimeInfoLayout.setVerticalGroup(
            pAnimeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAnimeInfoLayout.createSequentialGroup()
                .addGroup(pAnimeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pAnimeInfoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbPreview))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pAnimeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pAnimeInfoLayout.createSequentialGroup()
                        .addComponent(lbProgress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pbar1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pbar2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pbar3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 66, Short.MAX_VALUE))
                    .addGroup(pAnimeInfoLayout.createSequentialGroup()
                        .addComponent(lbStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbAiringDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbEndDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbProducers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbGenres)))
                .addContainerGap())
        );

        tabpAnime.addTab("Info", pAnimeInfo);

        javax.swing.GroupLayout pAnimeEpisodesLayout = new javax.swing.GroupLayout(pAnimeEpisodes);
        pAnimeEpisodes.setLayout(pAnimeEpisodesLayout);
        pAnimeEpisodesLayout.setHorizontalGroup(
            pAnimeEpisodesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 612, Short.MAX_VALUE)
        );
        pAnimeEpisodesLayout.setVerticalGroup(
            pAnimeEpisodesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 362, Short.MAX_VALUE)
        );

        tabpAnime.addTab("Épisodes", pAnimeEpisodes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabpAnime)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabpAnime)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbAiringDate;
    private javax.swing.JLabel lbEndDate;
    private javax.swing.JLabel lbGenres;
    private javax.swing.JLabel lbPreview;
    private javax.swing.JLabel lbProducers;
    private javax.swing.JLabel lbProgress;
    private javax.swing.JLabel lbStatus;
    private javax.swing.JPanel pAnimeEpisodes;
    private javax.swing.JPanel pAnimeInfo;
    private javax.swing.JProgressBar pbar1;
    private javax.swing.JProgressBar pbar2;
    private javax.swing.JProgressBar pbar3;
    private javax.swing.JTabbedPane tabpAnime;
    private javax.swing.JTextPane tpSynopsis;
    // End of variables declaration//GEN-END:variables
}
