/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ch.jonathanblum.wthwatchnow.setup.view;

import ch.jonathanblum.wthwatchnow.setup.controller.SetupController;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Jonathan Blum <jonathan.blum@eldhar.com>
 */
public class SetupView extends javax.swing.JFrame {
    private final static Logger LOGGER = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
    private final SetupController controller;
    /**
     * Creates new form SetupView
     * @param controller
     */
    public SetupView(SetupController controller) {
        this.controller = controller;
        initComponents();
        initData();
    }
    
    private void initData() {
        tfHost.setText("localhost");
        tfPort.setText("1521");
        tfUsername.setText("system");
        pfPassword.setText("manager");
        initDriversList();
        
    }
    
    private void initDriversList() {
        String[] drivers = new String[] {"Oracle", "MySQL"};
        cbDrivers.setModel(new DefaultComboBoxModel<>(drivers));
    } 
    
    private void testConnection() {
        if(!checkEmptyFields()) {
            JOptionPane.showMessageDialog(this, "Merci de vérifier les champs", "Erreur de connexion", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String selecteddriver = cbDrivers.getSelectedItem().toString().toLowerCase();
        String host = tfHost.getText().trim();
        int port = Integer.parseInt(tfPort.getText());
        String username = tfUsername.getText().trim();
        String pwd = new String(pfPassword.getPassword());
        String database = tfDatabase.getText().trim();
        
        // Testing
        ArrayList<String> dblist;
        try {
            dblist = controller.testConnection(selecteddriver, host, port, username, pwd);
            if(dblist != null) {
                if(dblist.contains(database))
                    JOptionPane.showMessageDialog(this, "La base " + database + " existe.", "Erreur de connexion", JOptionPane.WARNING_MESSAGE);
                btValidate.setEnabled(true);
            } else {
                // Connection Fail
                JOptionPane.showMessageDialog(this, "Erreur de connexion, veuillez vérifier les champs.", "Erreur de connexion", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            LOGGER.log(Level.SEVERE, ex.getMessage());
            JOptionPane.showMessageDialog(this, "Impossible de se connecter à la base de donnée", "Erreur de connexion", JOptionPane.ERROR_MESSAGE);
            
        }

    }
    
    private boolean checkEmptyFields() {
        if(!tfHost.getText().isEmpty() ||
           !tfPort.getText().isEmpty() ||
           !tfUsername.getText().isEmpty() ||
           !tfDatabase.getText().isEmpty()) {
            try {
                Integer.parseInt(tfPort.getText());
                return true;
            } catch (NumberFormatException ex) {
                return false;
            }

        } else {
             return false;
        }
    }
    

    private void validateConnectionInfo() {
        String selecteddriver = cbDrivers.getSelectedItem().toString().toLowerCase();
        String host = tfHost.getText().trim();
        int port = Integer.parseInt(tfPort.getText());
        String username = tfUsername.getText().trim();
        String pwd = new String(pfPassword.getPassword());
        String database = tfDatabase.getText().trim();
        
        controller.initializeDatabase(selecteddriver, host, port, username, pwd, database);
        this.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblWelcomeMsg = new javax.swing.JLabel();
        lblDBType = new javax.swing.JLabel();
        cbDrivers = new javax.swing.JComboBox<>();
        lbHost = new javax.swing.JLabel();
        tfHost = new javax.swing.JTextField();
        tfPort = new javax.swing.JTextField();
        lbPort = new javax.swing.JLabel();
        lbUsername = new javax.swing.JLabel();
        tfUsername = new javax.swing.JTextField();
        lbPassword = new javax.swing.JLabel();
        pfPassword = new javax.swing.JPasswordField();
        btTestConnect = new javax.swing.JButton();
        btValidate = new javax.swing.JButton();
        lbDatabase = new javax.swing.JLabel();
        tfDatabase = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WTHWatchNow Setup");
        setResizable(false);

        lblWelcomeMsg.setText("<html>Bienvenue sur l'utilitaire de configuration de WTHWatchNow.<br/><br/>\nAucune configuration n'a été détectée. <br/>\nMerci de renseigner les champs ci-dessous afin d'assurer le fonctionnement de l'application.\n</html>");

        lblDBType.setText("Type de base de donnée");

        cbDrivers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Oracle" }));
        cbDrivers.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbDriversItemStateChanged(evt);
            }
        });

        lbHost.setText("Adresse d'hôte");

        tfHost.setText("localhost");

        tfPort.setText("4443");

        lbPort.setText("Port");

        lbUsername.setText("Nom d'utilisateur");

        tfUsername.setText("root");

        lbPassword.setText("Mot de Passe");

        pfPassword.setText("jPasswordField1");

        btTestConnect.setText("Tester la connexion");
        btTestConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTestConnectActionPerformed(evt);
            }
        });

        btValidate.setText("Valider");
        btValidate.setEnabled(false);
        btValidate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btValidateActionPerformed(evt);
            }
        });

        lbDatabase.setText("Nom de la base de donnée");

        tfDatabase.setText("wthwatchnow");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblWelcomeMsg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbDrivers, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btTestConnect))
                    .addComponent(lbDatabase)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfUsername)
                            .addComponent(lblDBType)
                            .addComponent(lbHost)
                            .addComponent(tfHost, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbUsername)
                            .addComponent(tfDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbPassword)
                            .addComponent(lbPort)
                            .addComponent(tfPort, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btValidate, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblWelcomeMsg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblDBType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbDrivers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btTestConnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbHost)
                    .addComponent(lbPort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbUsername)
                    .addComponent(lbPassword))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(lbDatabase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btValidate)
                    .addComponent(tfDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbDriversItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbDriversItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cbDriversItemStateChanged

    private void btTestConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTestConnectActionPerformed
        testConnection();
    }//GEN-LAST:event_btTestConnectActionPerformed

    private void btValidateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btValidateActionPerformed
        validateConnectionInfo();
    }//GEN-LAST:event_btValidateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btTestConnect;
    private javax.swing.JButton btValidate;
    private javax.swing.JComboBox<String> cbDrivers;
    private javax.swing.JLabel lbDatabase;
    private javax.swing.JLabel lbHost;
    private javax.swing.JLabel lbPassword;
    private javax.swing.JLabel lbPort;
    private javax.swing.JLabel lbUsername;
    private javax.swing.JLabel lblDBType;
    private javax.swing.JLabel lblWelcomeMsg;
    private javax.swing.JPasswordField pfPassword;
    private javax.swing.JTextField tfDatabase;
    private javax.swing.JTextField tfHost;
    private javax.swing.JTextField tfPort;
    private javax.swing.JTextField tfUsername;
    // End of variables declaration//GEN-END:variables

}
